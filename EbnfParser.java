import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;

public class EbnfParser {

    static Lexer lexer = new Lexer();
    static int nextToken;
    
    /* expr
    Parses strings in the language generated by the rule:
    <expr> -> <term> {(+ | -) <term>} 
    */
    static void expr() throws IOException {
        System.out.println("Enter <expr>");
        // Parse the first term
        term();
        // As long as the next token is + or -, get the next token and parse the next term
        while (nextToken == Lexer.ADD_OP || nextToken == Lexer.SUB_OP) {
            nextToken = Lexer.lex();
            term();
        }
        System.out.println("Exit <expr>");
    }
        
    /* term
    Parses strings in the language generated by the rule:
    <term> -> <factor> {(* | /) <factor>)
    */
    static void term() throws IOException {
        System.out.println("Enter <term>");
        /* Parse the first factor */
        factor();
        /* As long as the next token is * or /, get the
        next token and parse the next factor */
        while (nextToken == Lexer.MULT_OP || nextToken == Lexer.DIV_OP) {
            nextToken = Lexer.lex();
            factor();
        }
        System.out.println("Exit <term>");
    }

    /* factor
    Parses strings in the language generated by the rule:
    <factor> -> id | int_constant | ( <expr )
    */
    static void factor() throws IOException {
        System.out.println("Enter <factor>");
        /* Determine which RHS */
        if (nextToken == Lexer.IDENT || nextToken == Lexer.INT_LIT) {
        /* Get the next token */
            nextToken = Lexer.lex();
            /* If the RHS is ( <expr> ), call lex to pass over the
            left parenthesis, call expr, and check for the right
            parenthesis */
        }
        else {
            if (nextToken == Lexer.LEFT_PAREN) {
                nextToken = Lexer.lex();
                expr();
                if (nextToken == Lexer.RIGHT_PAREN)
                    nextToken = Lexer.lex();
                else
                    error("");
            } /* End of if (nextToken == ... */
            /* It was not an id, an integer literal, or a left parenthesis */
            else {
                System.out.println("Err");
            };
        }
        System.out.println("Exit <factor>");
    }
    
    // Error reporting function
    static void error(String message) {
        System.out.println("Parse error: " + message);
        System.exit(1);
    }
    
        // Main entry point for parsing the Hawk script
        public static void main(String[] args) throws IOException {
            System.out.println("Starting Parsing");
            Lexer.in_fp = new BufferedReader(new FileReader("ebnf_script.txt"));
            nextToken = Lexer.lex(); // Initialize lexer and get the first token
            expr(); // Start parsing the program
        System.out.println("Parsing completed successfully!");
    }
}
